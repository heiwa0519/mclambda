// --------------------------------------------------------------------------
//                            MC-LAMBDA ROUTINE
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//  Release date  : AUG-2019
//  Authors       : Hernández Olcina, Jorge
//
//  Master in Geomatics Engineering and Geoinformation
//  Universidad Politécnica de Valencia
//  Hochschule Karlsruhe - Technik und Wirtschaft University of Applied Sciences
// --------------------------------------------------------------------------
// --------------------------------------------------------------------------
//
//  DESCRIPTION:
//
//  This is the main routin of the MC-LAMBDA algorithm. The ILS method will 
//  be used for integer estimation based on the provided float ambiguity 
//  vector ahat and associated variance-covariance matrix Qahat.
//  However, the user may also select other methods: integer rounding,
//  bootstrapping and, furthermore, there is the option to apply the Ratio Test 
//  to decide on acceptance of the fixed solution.
//
//  INPUTS:
//
//      ahat: Float ambiguities
//     Qahat: Variance/covariance matrix of ambiguities
//    method: 1: ILS method based on search-and-shrink
//            2: ILS method based enumeration in search
//            3: Integer rounding method
//            4: Integer bootstrapping method
//            5: ILS method with Ratio Test (uses search-and shrink)
//     param: Activate or deactivate the optional input arguments.
//            - 0 -> Deactivated
//            - 1 -> Activated
//      type: [Optional input argument] Define some specific arguments
//            - 'ncands',value: Number of requested integer candidate vectors
//                              (only used with ILS/PAR, DEFAULT = 2)
//            - 'P0',value    : With method 6 (ILS + Ratio test): Fixed failure rate
//                              (available options: 0.01 or 0.001) [DEFAULT=0.001]
//            - 'MU',value    : Fixed threshold value for Ratio Test
//                              (value must be between 0 and 1)
//     value: [Optional input argument] Value for the previous methods.
// 
//  OUTPUTS:
//
//    afixed: Array of size (n x ncands) with the estimated integer
//            candidates, sorted according to the corresponding squared norms,
//            best candidate first.
//            For integer rounding and bootstrapping: ncands = 1
//    sqnorm: Distance between integer candidate and float ambiguity vectors
//            in the metric of the variance-covariance matrix Qahat.
//            Only available for ILS.
//        Ps: Bootstrapped success rate.
//            If ILS/PAR is used, Ps is its lower bound;
//            If rounding is used, Ps is its upper bound;
//            If bootstrapping is used, Ps is the exact success rate.
//     Qzhat: Variance-covariance matrix of decorrelated ambiguities
//            (corresponding to fixed subset in case of PAR).
//         Z: Transformation matrix with
//            - dimension (n x n) for methods 1-4, 6
//            - dimension (n x nfixed) for method 5 (PAR).
//    nfixed: Number of fixed ambiguities
//            - with methods 1 to 4: will always be equal to n
//            - with method 5 (PAR): will be equal to the number of
//              fixed decorrelated ambiguities
//            - with method 6 (ILS + Ratio test): will be equal to n if fixed
//              solution is accepted, and 0 otherwise
//        mu: Threshold value used for Ratio Test
//
// --------------------------------------------------------------------------

// Include Files
#include <iostream>
#include "math_functions\upper.cpp"
#include "math_functions\erfc.cpp"
#include "LAMBDA_emxutil.cpp"
#include "math_functions\interp1q.cpp"
#include "routines\ssearch.cpp"
#include "routines\lsearch.cpp"
#include "math_functions\eig.cpp"
#include "routines\decorrel.cpp"
#include "LAMBDA_rtwutil.cpp"
#include "LAMBDA.h"

using namespace std;

// --------------------------------------------------------------------------
//                          Function Definitions
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
//                               rt_remd_snf
// --------------------------------------------------------------------------
//
// Arguments    : double u0 -> Number to get the part not whole 
//                double u1 -> Round Factor (normally 1)
//
// Return       : double y  -> Part not whole
//
// --------------------------------------------------------------------------
static double rt_remd_snf(double u0, double u1)
{
  double y;
  double b_u1;
  double q;
  if (!((!rtIsNaN(u0)) && (!rtIsInf(u0)) && ((!rtIsNaN(u1)) && (!rtIsInf(u1)))))
  {
    y = rtNaN;
  } else {
    if (u1 < 0.0) {
      b_u1 = std::ceil(u1);
    } else {
      b_u1 = std::floor(u1);
    }
    if ((u1 != 0.0) && (u1 != b_u1)) {
      q = std::abs(u0 / u1);
      if (std::abs(q - std::floor(q + 0.5)) <= DBL_EPSILON * q) {
        y = 0.0 * u0;
      } else {
        y = std::fmod(u0, u1);
      }
    } else {
      y = std::fmod(u0, u1);
    }
  }
  return y;
}
// --------------------------------------------------------------------------
//                            End of rt_remd_snf
// --------------------------------------------------------------------------

// --------------------------------------------------------------------------
//                                 mclambda
// --------------------------------------------------------------------------
//
// Arguments    : double ahat[12]               -> Vector of float ambiguities
//                const double Qahat[144]       -> Variance/covariance matrix 
//                                                 of ambiguities
//                double method                 -> Calculation methodology
//                double param                  -> Activate optional parameters
//                const emxArray_char_T *type   -> Type of optional calculation
//                double value                  -> Value for optional calculation
//                emxArray_real_T *afixed       -> Output afixed
//                emxArray_real_T *sqnorm       -> Output sqnorm
//                double *Ps                    -> Output Ps
//                double Qzhat[]                -> Output Qzhat
//                double Z[]                    -> Output Z
//                double *nfixed                -> Output nfixed
//                double *mu                    -> Output mu
//
// Return       : void
//
// --------------------------------------------------------------------------
void mclambda(double ahat[12], const double Qahat[144], double method, double
            param, const emxArray_char_T *type, double value, emxArray_real_T
            *afixed, emxArray_real_T *sqnorm, double *Ps, double Qzhat[],
            double Z[], double *nfixed, double *mu)
{
  // ============================= VARIABLES ================================
  boolean_T tf;
  int k;
  boolean_T exitg1;
  int exponent;
  double ncands;
  double P0;
  int FFRT;
  double b_mu;
  double i;
  emxArray_char_T *switch_expression;
  int ar;
  emxArray_real_T *zfixed;
  char t0_f1[2];
  char t1_f1[6];
  double b_nfixed;
  int exitg2;
  int ib;
  creal_T unusedExpr[12];
  double x[12];
  double incr[12];
  double L[144];
  double afcond[12];
  double iZt[144];
  double b_Ps;
  double S[12];
  emxArray_real_T *b_zfixed;
  emxArray_real_T *b_sqnorm;
  emxArray_real_T *zpar;
  unsigned int unnamed_idx_1;
  int ic;
  int ia;
  double b_afixed[12];
  double S_data[11];
  double table_data[1984];

  // ============================= DATA =====================================
  static const signed char iv0[3] = { 1, 2, 5 };
  static const double table10[1271] = { 0.0, 0.01, 0.011, 0.016, 0.021, 0.026,
    0.031, 0.036, 0.041, 0.046, 0.051, 0.056, 0.061, 0.066, 0.071, 0.076, 0.081,
    0.086, 0.091, 0.096, 0.12, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.499, 0.5,
    1.0, 1.0, 1.0, 0.963491200335944, 0.799834518089909, 0.682403839076713,
    0.587935282619425, 0.51977326068167, 0.478452649076062, 0.439153300197896,
    0.410977357058603, 0.387971591423495, 0.36733819115195, 0.349209299042099,
    0.333717057892076, 0.3209340359386, 0.310017589565652, 0.300268142191808,
    0.291241186498409, 0.2824922151668, 0.273578683628321, 0.229389024389659,
    0.17356235996658, 0.0986461598112005, 0.0393975953924293, 0.0210478967758402,
    0.0113334531270347, 0.0112478744295242, 0.0111167533512963,
    0.00863437872972396, 0.0, 0.0, 1.0, 1.0, 0.966249384900934,
    0.814897318267053, 0.702794110603308, 0.61394961791818, 0.551371019658023,
    0.508607657766473, 0.471545249830515, 0.443058857177702, 0.418675963453983,
    0.396898836742794, 0.377711277002395, 0.361097084191047, 0.34701351358053,
    0.335035365260396, 0.324536176770675, 0.314899994695977, 0.305510865620917,
    0.295764021129764, 0.249709162277695, 0.202681757515059, 0.139188186596497,
    0.09088482198001, 0.0711084647309639, 0.0599869575739893, 0.0554748154391501,
    0.0519752941317519, 0.0483683782311481, 0.0, 0.0, 1.0, 1.0,
    0.969007569465924, 0.829960118444198, 0.723184382129903, 0.639963953216935,
    0.582968778634377, 0.538762666456884, 0.503937199463135, 0.475140357296802,
    0.449380335484472, 0.426459482333639, 0.406213254962691, 0.388477110490018,
    0.373092991222459, 0.36005314095514, 0.348804211349542, 0.338558802893546,
    0.328529516075034, 0.317949358631207, 0.270029300165731, 0.231801155063537,
    0.179730213381794, 0.142372048567591, 0.121169032686088, 0.108640462020944,
    0.099701756448776, 0.0928338349122075, 0.0881023777325723, 0.0, 0.0, 1.0,
    1.0, 0.971383039236301, 0.840602046001821, 0.743458417965349,
    0.672084178256469, 0.615361582574098, 0.570700091316174, 0.533702160071396,
    0.502395321718132, 0.475447806446167, 0.451534684386553, 0.430254048516241,
    0.411766870083778, 0.396234406271788, 0.383429375517089, 0.372303945137858,
    0.362090300972286, 0.352826652585663, 0.344138009551642, 0.298936271035947,
    0.259524052016889, 0.218066835281035, 0.187303739412184, 0.168885601821729,
    0.153858351505968, 0.142545648016812, 0.133734915349141, 0.127850677384214,
    0.0, 0.0, 1.0, 1.0, 0.973229088258184, 0.851455771038273, 0.762062360229772,
    0.700442247425954, 0.649984636405883, 0.599301555288813, 0.553522052653414,
    0.522273447868833, 0.495978759130784, 0.473407370856251, 0.453510606303724,
    0.435244913987108, 0.418195763660312, 0.402767767659704, 0.389350938840071,
    0.378278380900962, 0.368523523618512, 0.359513557641176, 0.324141841248556,
    0.28930842050461, 0.258066397636293, 0.235482769312622, 0.213578615769714,
    0.197134866866849, 0.184848902312135, 0.175111358969462, 0.167679265660954,
    0.0, 0.0, 1.0, 1.0, 0.978095890159255, 0.878147337289067, 0.795145805819759,
    0.729659459675582, 0.679413551149778, 0.642769374682529, 0.610878093320771,
    0.583071622700397, 0.558929294174387, 0.538030439095726, 0.51993898883205,
    0.504161147882095, 0.490222344676145, 0.477650794299476, 0.465974213575084,
    0.454746351634601, 0.443936636053523, 0.433663581782394, 0.395406617759563,
    0.365759358475685, 0.328311865788127, 0.297355057634163, 0.273066769541076,
    0.25412804143851, 0.238989925797447, 0.229110255576304, 0.223152099046353,
    0.0, 0.0, 1.0, 1.0, 0.977731429398372, 0.879956110123148, 0.799862183900351,
    0.740503527756466, 0.700577642698429, 0.669324812551509, 0.64336558488865,
    0.620070771338617, 0.599050116724223, 0.580322043914358, 0.563904975777914,
    0.549800117547504, 0.536952165367634, 0.524771041044218, 0.513315739758856,
    0.50264525669315, 0.4928185870287, 0.483894725947109, 0.454092063489711,
    0.429547976433182, 0.401327050400633, 0.379075846260951, 0.360776713761819,
    0.345933076833691, 0.334092145202051, 0.32454208001566, 0.316164798107462,
    0.0, 0.0, 1.0, 1.0, 0.978631231117399, 0.883680836783764, 0.819123294988546,
    0.775035027127189, 0.742233066480311, 0.714520159036086, 0.689384938709345,
    0.666853295670156, 0.646951120088588, 0.629704302134707, 0.615138731978583,
    0.602992894634689, 0.592322696979099, 0.582836208081616, 0.574291728591041,
    0.566447559156173, 0.559062000425812, 0.55189335304876, 0.518294233007547,
    0.485952221260085, 0.449893720904585, 0.42094470870729, 0.397796340556935,
    0.383111296841587, 0.372104890767172, 0.361342881919184, 0.356953642384106,
    0.0, 0.0, 1.0, 1.0, 0.980135420330173, 0.890501305718523, 0.828905486097538,
    0.787331303466935, 0.755640802233977, 0.729005121962147, 0.704581402387785,
    0.682057073891411, 0.661742393441799, 0.643950963169807, 0.628996385206296,
    0.617048559104329, 0.607222947841078, 0.598303919390869, 0.590136714446206,
    0.58258375688911, 0.575507470601599, 0.568770279465694, 0.539519704478992,
    0.511897641140634, 0.479914299331182, 0.455461279039084, 0.436275357638552,
    0.424261648660219, 0.415345134992871, 0.408567953576111, 0.405960288265639,
    0.0, 0.0, 1.0, 1.0, 0.981639609542948, 0.897321774653282, 0.83868767720653,
    0.79962757980668, 0.769048537987642, 0.743490084888208, 0.719777866066225,
    0.697260852112667, 0.67653366679501, 0.658197624204906, 0.642854038434009,
    0.631104223573969, 0.622123198703057, 0.613771630700121, 0.605981700301372,
    0.598719954622047, 0.591952940777386, 0.585647205882628, 0.560745175950438,
    0.537843061021182, 0.509934877757778, 0.489977849370878, 0.47475437472017,
    0.46541200047885, 0.458585379218571, 0.455793025233039, 0.454966934147172,
    0.0, 0.0, 1.0, 1.0, 0.976134826675712, 0.896902516388933, 0.842390517340331,
    0.802444389153373, 0.772323384868829, 0.749028786024466, 0.727681680506933,
    0.707519155680551, 0.689487686728806, 0.673597134080021, 0.659803462054019,
    0.648300646148099, 0.638571904706009, 0.629569601831247, 0.621397709647954,
    0.613912192989017, 0.606957447301865, 0.600839075657221, 0.580136833502892,
    0.562084811274067, 0.538986868119549, 0.521745285053071, 0.50897823444498,
    0.501035934237959, 0.495023650880262, 0.49137344136733, 0.488818368511146,
    0.0, 0.0, 1.0, 1.0, 0.970630043808475, 0.896483258124583, 0.846093357474131,
    0.805261198500066, 0.775598231750015, 0.754567487160724, 0.735585494947641,
    0.717777459248435, 0.702441706662602, 0.688996643955136, 0.67675288567403,
    0.665497068722229, 0.65502061070896, 0.645367572962373, 0.636813718994535,
    0.629104431355986, 0.621961953826343, 0.616030945431815, 0.599528491055345,
    0.586326561526952, 0.56803885848132, 0.553512720735263, 0.54320209416979,
    0.536659867997067, 0.531461922541953, 0.526953857501621, 0.522669802875119,
    0.0, 0.0, 1.0, 1.0, 0.976178041414317, 0.905352168960621, 0.856554697979303,
    0.820221474929404, 0.792765999939808, 0.772107740130707, 0.754247875239092,
    0.737810592377061, 0.723296206827663, 0.710422457499994, 0.698853187194652,
    0.688490249889708, 0.679237889916375, 0.670915200420828, 0.663340039515583,
    0.656377821557495, 0.649885706254695, 0.64418206093861, 0.625206418658382,
    0.610040827745228, 0.592103064775846, 0.579854619716696, 0.571052544860864,
    0.564812061392058, 0.559332720726316, 0.554368741354233, 0.549890578470502,
    0.0, 0.0, 1.0, 1.0, 0.981726039020159, 0.914221079796659, 0.867016038484475,
    0.835181751358742, 0.809933768129601, 0.789647993100691, 0.772910255530543,
    0.757843725505687, 0.744150706992724, 0.731848271044853, 0.720953488715274,
    0.711483431057186, 0.70345516912379, 0.696462827879284, 0.68986636003663,
    0.683651211759003, 0.677809458683047, 0.672333176445405, 0.650884346261419,
    0.633755093963505, 0.616167271070373, 0.606196518698129, 0.598902995551939,
    0.592964254787048, 0.587203518910679, 0.581783625206846, 0.577111354065883,
    0.0, 0.0, 1.0, 1.0, 0.981077067137265, 0.920351508678607, 0.877877196432654,
    0.844573692555534, 0.818844285163575, 0.797275641569254, 0.778726103871341,
    0.763401755570305, 0.750733167677884, 0.739386994687664, 0.729373217717933,
    0.720711144635293, 0.713056114170666, 0.705871937976223, 0.699151936605003,
    0.692894583292676, 0.687098351274911, 0.681761713787378, 0.662152082846232,
    0.649717296033923, 0.636934646859539, 0.628321672395608, 0.621483703920921,
    0.616440276133522, 0.612921717342923, 0.610135546372381, 0.608625286574539,
    0.0, 0.0, 1.0, 1.0, 0.984189605519119, 0.914068215107887, 0.868191878005836,
    0.843932723234161, 0.826328256599546, 0.809436001112007, 0.794129700277637,
    0.780163291781344, 0.767196918848323, 0.756135022321118, 0.746942138237975,
    0.738004473564393, 0.729428465121532, 0.721320549730555, 0.713787164212623,
    0.706934745388898, 0.70086973008054, 0.695698555108713, 0.681179988805059,
    0.669630086505765, 0.65737374053147, 0.647585630914837, 0.6395962131518,
    0.634038661861171, 0.631412804962197, 0.629818279298919, 0.628500614778987,
    0.0, 0.0, 1.0, 1.0, 0.984204052316411, 0.922086830254308, 0.879280937396011,
    0.854626724997418, 0.835123873148331, 0.817593981077019, 0.802266758259786,
    0.788812011262346, 0.776839529107835, 0.76653838308671, 0.757758204440588,
    0.749581268707437, 0.741949966353056, 0.734806687843247, 0.728088401347479,
    0.721799669224881, 0.716048191947459, 0.710945909433201, 0.695789161313353,
    0.685027828029847, 0.672509126913012, 0.662109118968355, 0.654464408015884,
    0.648967864067922, 0.645364271104707, 0.642984846944189, 0.6417340799745,
    0.0, 0.0, 1.0, 1.0, 0.984218499113702, 0.930105445400729, 0.890369996786186,
    0.865320726760674, 0.843919489697117, 0.825751961042032, 0.810403816241936,
    0.797460730743348, 0.786482139367346, 0.776941743852303, 0.768574270643201,
    0.761158063850481, 0.75447146758458, 0.748292825955938, 0.742389638482335,
    0.736664593060864, 0.731226653814377, 0.726193263757688, 0.710398333821647,
    0.700425569553929, 0.687644513294554, 0.676632607021873, 0.669332602879968,
    0.663897066274672, 0.659315737247217, 0.65615141458946, 0.654967545170013,
    0.0, 0.0, 1.0, 1.0, 0.986827836688449, 0.934166260135191, 0.89492356046639,
    0.870383521867956, 0.849407143235454, 0.831570230449729, 0.816511562085667,
    0.803869916718153, 0.793270952609354, 0.784246804212366, 0.776305474270307,
    0.769268233712056, 0.762996078406179, 0.757350004221244, 0.752185584729488,
    0.747425987692806, 0.743005335049631, 0.738843214786145, 0.723851668516087,
    0.712003951971866, 0.699517791221936, 0.690891060973797, 0.685237723031466,
    0.681364470282165, 0.678191260437401, 0.67598823990646, 0.675165897945868,
    0.0, 0.0, 1.0, 1.0, 0.989437174263197, 0.938227074869653, 0.899477124146593,
    0.875446316975238, 0.854894796773792, 0.837388499857427, 0.822619307929398,
    0.810279102692958, 0.800059765851362, 0.791551864572428, 0.784036677897413,
    0.777378403573631, 0.771520689227779, 0.76640718248655, 0.761981530976642,
    0.758187382324749, 0.754784016284884, 0.751493165814601, 0.737305003210528,
    0.723582334389802, 0.711391069149318, 0.70514951492572, 0.701142843182965,
    0.698831874289658, 0.697066783627585, 0.69582506522346, 0.695364250721722,
    0.0, 0.0, 1.0, 1.0, 0.987438586233359, 0.937814369227994, 0.903261765317316,
    0.881110391822826, 0.862153050339075, 0.845866854428079, 0.831884425835156,
    0.819838386305624, 0.809361357584799, 0.800093158774863, 0.791834186062164,
    0.784542697732669, 0.778183606396762, 0.772721824664826, 0.768054503456218,
    0.763713558930053, 0.759629088556047, 0.75581675566185, 0.741799920802634,
    0.732664532417658, 0.723448767064611, 0.717318747136481, 0.712181193231773,
    0.708394342114359, 0.706813087505316, 0.705735293531639, 0.705299898992211,
    0.0, 0.0, 1.0, 1.0, 0.987560564739844, 0.941460493312214, 0.908915627635586,
    0.884125738380003, 0.866699873741486, 0.852682743773999, 0.8408159370365,
    0.830946793664087, 0.82292265379186, 0.816558240430922, 0.810874815178426,
    0.805469535867187, 0.800337588512759, 0.795474159130695, 0.790874433736551,
    0.78653359834588, 0.782446838974238, 0.778609341637178, 0.763507191103449,
    0.75173657009076, 0.741690591055204, 0.73045912311075, 0.720165628630026,
    0.714701416421282, 0.713902267886003, 0.713417123491555, 0.713245125454679,
    0.0, 0.0, 1.0, 1.0, 0.986885441239609, 0.942173074208314, 0.910909399636859,
    0.88789998732942, 0.871139186311405, 0.85770122070699, 0.846210398617678,
    0.836472637509304, 0.828346401059276, 0.821592157269947, 0.815399010375731,
    0.809549249762833, 0.804051487572793, 0.79891433594715, 0.794146407027442,
    0.789756312955211, 0.785752665871994, 0.782142790559095, 0.768417331102059,
    0.757583445954525, 0.747539496956774, 0.738946552159138, 0.731491090798414,
    0.726996298778046, 0.725255062022776, 0.723952364835309, 0.723189071801203,
    0.0, 0.0, 1.0, 1.0, 0.986210317739374, 0.942885655104415, 0.912903171638132,
    0.891674236278838, 0.875578498881324, 0.862719697639981, 0.851604860198857,
    0.84199848135452, 0.833770148326692, 0.826626074108973, 0.819923205573036,
    0.81362896365848, 0.807765386632828, 0.802354512763604, 0.797418380318334,
    0.792979027564541, 0.789058492769751, 0.785676239481011, 0.77332747110067,
    0.763430321818289, 0.753388402858344, 0.747433981207526, 0.742816552966801,
    0.73929118113481, 0.73660785615955, 0.734487606179063, 0.733133018147727,
    0.0, 0.0, 1.0, 1.0, 0.989070722238625, 0.947571724002187, 0.916129378449036,
    0.895261141574959, 0.878991061530502, 0.86534472297926, 0.853532493450197,
    0.843393474048537, 0.83481931209108, 0.827619967781566, 0.821427295710182,
    0.815868749651907, 0.810730768413047, 0.806012305874787, 0.801712315918309,
    0.797829752424797, 0.794363569275434, 0.791311432991167, 0.780242513989087,
    0.771830979876554, 0.763118603565479, 0.75775340350785, 0.753436797651763,
    0.750168466609966, 0.747945554719885, 0.74641963073617, 0.745540029684902,
    0.0, 0.0, 1.0, 1.0, 0.991931126737876, 0.95225779289996, 0.919355585259939,
    0.898848046871081, 0.88240362417968, 0.867969748318539, 0.855460126701537,
    0.844788466742553, 0.835868475855468, 0.82861386145416, 0.822931385847327,
    0.818108535645333, 0.813696150193267, 0.809670098985969, 0.806006251518284,
    0.802680477285053, 0.799668645781118, 0.796946626501323, 0.787157556877504,
    0.78023163793482, 0.772848804272614, 0.768072825808174, 0.764057042336725,
    0.761045752085122, 0.75928325328022, 0.758351655293277, 0.757947041222077,
    0.0, 0.0, 1.0, 1.0, 0.988041044406521, 0.946288791355471, 0.919612438013772,
    0.898181709568404, 0.882067826961624, 0.869550946291171, 0.858812788421333,
    0.849490778339224, 0.841222341031958, 0.833655206946714, 0.826741487688408,
    0.820761991790077, 0.816003454929185, 0.81202519605592, 0.808434389341544,
    0.805209073573047, 0.802327287537421, 0.799767070021656, 0.79069360941445,
    0.785032960620061, 0.779744972226447, 0.774938437966424, 0.770719259487742,
    0.766802538389465, 0.765658595196935, 0.765098505695621, 0.764900768115986,
    0.0, 0.0, 1.0, 1.0, 0.992168850442779, 0.959092614938045, 0.929611651002147,
    0.90547340276958, 0.889031863193269, 0.876688180654993, 0.866980243097433,
    0.859713079009327, 0.853685890579306, 0.84796746985448, 0.842565247263279,
    0.837486653234135, 0.832739118195478, 0.82833007257574, 0.824266946803352,
    0.820557171306744, 0.81720817651435, 0.814227392854598, 0.805125587029775,
    0.798468567957013, 0.790386333863852, 0.785126593182027, 0.781599452361292,
    0.778687903453508, 0.776538052448838, 0.775827814569536, 0.775827814569536,
    0.0, 0.0, 1.0, 1.0, 0.99019082932358, 0.955329122483994, 0.927652502675995,
    0.906163145402374, 0.890982654671049, 0.879566720908531, 0.870621283149484,
    0.863226116075273, 0.856700972443389, 0.850582741011772, 0.844877629729026,
    0.839591846543751, 0.834731599404552, 0.83030309626003, 0.826312545058788,
    0.822766153749428, 0.819601979918782, 0.816710203583027, 0.806921100999125,
    0.800813558434465, 0.794319706774836, 0.789414999424253, 0.785756942085925,
    0.783005018625862, 0.781012483765834, 0.779949924134941, 0.779637153658045,
    0.0, 0.0, 1.0, 1.0, 0.988212808204381, 0.951565630029943, 0.925693354349844,
    0.906852888035168, 0.892933446148828, 0.882445261162069, 0.874262323201536,
    0.86673915314122, 0.859716054307471, 0.853198012169064, 0.847190012194772,
    0.841697039853368, 0.836724080613627, 0.832276119944321, 0.828358143314225,
    0.824975136192111, 0.821995783323213, 0.819193014311455, 0.808716614968474,
    0.803158548911918, 0.79825307968582, 0.793703405666479, 0.789914431810557,
    0.787322133798216, 0.785486915082831, 0.784072033700346, 0.783446492746553,
    0.0, 0.0, 1.0, 1.0, 0.992010487752071, 0.963514219609463, 0.93988742455909,
    0.91968726459826, 0.902592084007499, 0.888590735771496, 0.87785395170264,
    0.869989321742431, 0.863172491720689, 0.856975869620154, 0.851376300141292,
    0.846350627984571, 0.841875697850458, 0.83792835443942, 0.834485442451926,
    0.831523806588443, 0.82894233612159, 0.82652341640304, 0.81707144457346,
    0.810330349337498, 0.803385818737456, 0.797505224071355, 0.792673232457936,
    0.789902523208237, 0.788935510521548, 0.788228069830306, 0.787915299353409,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0, 1.0, 1.0, 0.995808167299761, 0.975462809188983, 0.954081494768336,
    0.932521641161353, 0.91225072186617, 0.894736210380923, 0.881445580203744,
    0.873239490343642, 0.866628929133908, 0.860753727071244, 0.855562588087812,
    0.851004216115773, 0.847027315087288, 0.84358058893452, 0.840612741589628,
    0.838072476984775, 0.835888888919966, 0.833853818494625, 0.825426274178446,
    0.817502149763079, 0.808518557789092, 0.801307042476231, 0.795432033105314,
    0.792482912618258, 0.792384105960265, 0.792384105960265, 0.792384105960265,
    0.0, 0.0 };

  static const double table1[1984] = { 0.0, 0.001, 0.0012, 0.0015, 0.002, 0.005,
    0.01, 0.015, 0.02, 0.025, 0.03, 0.035, 0.04, 0.045, 0.05, 0.055, 0.06, 0.065,
    0.07, 0.075, 0.08, 0.085, 0.09, 0.095, 0.1, 0.12, 0.15, 0.2, 0.25, 0.26, 1.0,
    1.0, 1.0, 0.94, 0.87, 0.78, 0.54, 0.36, 0.27, 0.21, 0.19, 0.17, 0.16, 0.15,
    0.14, 0.13, 0.12, 0.12, 0.11, 0.11, 0.1, 0.1, 0.1, 0.09, 0.09, 0.09, 0.08,
    0.07, 0.05, 0.04, 0.0, 0.0, 1.0, 1.0, 0.94, 0.87, 0.78, 0.54, 0.38, 0.29,
    0.24, 0.22, 0.2, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.12, 0.11, 0.1,
    0.1, 0.09, 0.09, 0.09, 0.08, 0.07, 0.05, 0.04, 0.0, 0.0, 1.0, 1.0, 0.94,
    0.88, 0.8, 0.57, 0.41, 0.32, 0.27, 0.24, 0.22, 0.2, 0.18, 0.17, 0.16, 0.15,
    0.15, 0.14, 0.13, 0.12, 0.12, 0.11, 0.11, 0.1, 0.1, 0.09, 0.08, 0.06, 0.05,
    0.0, 0.0, 1.0, 1.0, 0.94, 0.88, 0.8, 0.57, 0.43, 0.36, 0.3, 0.27, 0.24, 0.22,
    0.21, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.13, 0.12, 0.12, 0.11, 0.11,
    0.09, 0.08, 0.06, 0.06, 0.0, 0.0, 1.0, 1.0, 0.94, 0.89, 0.81, 0.59, 0.45,
    0.38, 0.33, 0.29, 0.26, 0.24, 0.22, 0.21, 0.19, 0.18, 0.17, 0.16, 0.15, 0.15,
    0.14, 0.14, 0.13, 0.13, 0.12, 0.11, 0.1, 0.1, 0.09, 0.0, 0.0, 1.0, 1.0, 0.94,
    0.89, 0.82, 0.64, 0.51, 0.43, 0.38, 0.35, 0.32, 0.3, 0.27, 0.26, 0.24, 0.23,
    0.21, 0.2, 0.2, 0.19, 0.19, 0.18, 0.18, 0.18, 0.17, 0.16, 0.16, 0.15, 0.14,
    0.0, 0.0, 1.0, 1.0, 0.94, 0.89, 0.83, 0.64, 0.52, 0.46, 0.42, 0.39, 0.35,
    0.33, 0.31, 0.29, 0.28, 0.27, 0.26, 0.26, 0.25, 0.24, 0.23, 0.23, 0.22, 0.22,
    0.22, 0.21, 0.2, 0.19, 0.18, 0.0, 0.0, 1.0, 1.0, 0.94, 0.89, 0.84, 0.68,
    0.57, 0.51, 0.46, 0.42, 0.4, 0.38, 0.36, 0.34, 0.32, 0.31, 0.3, 0.3, 0.3,
    0.29, 0.29, 0.28, 0.28, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.0, 0.0, 1.0,
    1.0, 0.96, 0.91, 0.84, 0.68, 0.57, 0.52, 0.48, 0.45, 0.42, 0.4, 0.39, 0.38,
    0.37, 0.36, 0.36, 0.35, 0.35, 0.34, 0.34, 0.33, 0.33, 0.33, 0.32, 0.31, 0.29,
    0.27, 0.25, 0.0, 0.0, 1.0, 1.0, 0.96, 0.92, 0.86, 0.69, 0.59, 0.53, 0.49,
    0.46, 0.44, 0.42, 0.4, 0.39, 0.39, 0.38, 0.37, 0.36, 0.36, 0.36, 0.35, 0.35,
    0.35, 0.34, 0.34, 0.33, 0.32, 0.31, 0.3, 0.0, 0.0, 1.0, 1.0, 0.96, 0.92,
    0.86, 0.71, 0.61, 0.55, 0.52, 0.49, 0.47, 0.45, 0.44, 0.43, 0.42, 0.41, 0.4,
    0.4, 0.39, 0.39, 0.38, 0.38, 0.38, 0.38, 0.37, 0.37, 0.35, 0.34, 0.34, 0.0,
    0.0, 1.0, 1.0, 0.96, 0.92, 0.86, 0.72, 0.62, 0.56, 0.52, 0.49, 0.47, 0.45,
    0.44, 0.44, 0.43, 0.42, 0.42, 0.41, 0.41, 0.41, 0.4, 0.4, 0.4, 0.4, 0.4,
    0.39, 0.39, 0.38, 0.37, 0.0, 0.0, 1.0, 1.0, 0.96, 0.92, 0.87, 0.73, 0.64,
    0.58, 0.55, 0.53, 0.51, 0.49, 0.48, 0.48, 0.47, 0.46, 0.46, 0.45, 0.45, 0.44,
    0.44, 0.44, 0.43, 0.43, 0.43, 0.42, 0.41, 0.41, 0.41, 0.0, 0.0, 1.0, 1.0,
    0.96, 0.93, 0.88, 0.74, 0.65, 0.6, 0.57, 0.54, 0.53, 0.51, 0.5, 0.49, 0.48,
    0.48, 0.47, 0.46, 0.46, 0.45, 0.45, 0.45, 0.45, 0.45, 0.44, 0.44, 0.44, 0.43,
    0.43, 0.0, 0.0, 1.0, 1.0, 0.96, 0.93, 0.88, 0.75, 0.67, 0.62, 0.59, 0.56,
    0.54, 0.53, 0.52, 0.51, 0.51, 0.5, 0.5, 0.5, 0.49, 0.49, 0.49, 0.49, 0.49,
    0.48, 0.48, 0.48, 0.47, 0.46, 0.46, 0.0, 0.0, 1.0, 1.0, 0.96, 0.93, 0.88,
    0.75, 0.67, 0.62, 0.59, 0.56, 0.55, 0.54, 0.53, 0.52, 0.52, 0.51, 0.51, 0.51,
    0.5, 0.5, 0.5, 0.5, 0.5, 0.49, 0.49, 0.49, 0.49, 0.48, 0.47, 0.0, 0.0, 1.0,
    1.0, 0.96, 0.93, 0.89, 0.77, 0.68, 0.64, 0.62, 0.6, 0.58, 0.57, 0.56, 0.56,
    0.55, 0.54, 0.54, 0.53, 0.53, 0.52, 0.52, 0.51, 0.51, 0.51, 0.51, 0.51, 0.5,
    0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 0.96, 0.93, 0.89, 0.78, 0.69, 0.65, 0.62, 0.6,
    0.59, 0.58, 0.56, 0.56, 0.55, 0.55, 0.54, 0.54, 0.54, 0.54, 0.53, 0.53, 0.53,
    0.53, 0.53, 0.53, 0.52, 0.51, 0.51, 0.0, 0.0, 1.0, 1.0, 0.96, 0.93, 0.9, 0.8,
    0.72, 0.67, 0.65, 0.63, 0.62, 0.61, 0.6, 0.59, 0.59, 0.58, 0.58, 0.58, 0.58,
    0.57, 0.57, 0.57, 0.56, 0.56, 0.56, 0.55, 0.55, 0.54, 0.54, 0.0, 0.0, 1.0,
    1.0, 0.96, 0.93, 0.9, 0.8, 0.72, 0.67, 0.65, 0.64, 0.62, 0.61, 0.61, 0.6,
    0.6, 0.59, 0.59, 0.59, 0.58, 0.58, 0.58, 0.58, 0.58, 0.57, 0.57, 0.57, 0.56,
    0.55, 0.55, 0.0, 0.0, 1.0, 1.0, 0.96, 0.93, 0.9, 0.8, 0.72, 0.69, 0.67, 0.65,
    0.64, 0.63, 0.62, 0.61, 0.61, 0.6, 0.6, 0.59, 0.59, 0.59, 0.59, 0.59, 0.59,
    0.59, 0.58, 0.58, 0.57, 0.57, 0.57, 0.0, 0.0, 1.0, 1.0, 0.96, 0.94, 0.9, 0.8,
    0.72, 0.69, 0.67, 0.66, 0.65, 0.64, 0.64, 0.63, 0.63, 0.62, 0.62, 0.61, 0.61,
    0.61, 0.61, 0.61, 0.61, 0.61, 0.61, 0.6, 0.6, 0.59, 0.59, 0.0, 0.0, 1.0, 1.0,
    0.96, 0.94, 0.9, 0.8, 0.72, 0.69, 0.67, 0.66, 0.65, 0.65, 0.65, 0.65, 0.64,
    0.64, 0.63, 0.63, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62, 0.62, 0.61, 0.61, 0.6,
    0.6, 0.0, 0.0, 1.0, 1.0, 0.96, 0.94, 0.9, 0.81, 0.74, 0.71, 0.7, 0.68, 0.67,
    0.66, 0.66, 0.65, 0.64, 0.64, 0.63, 0.63, 0.63, 0.63, 0.62, 0.62, 0.62, 0.62,
    0.62, 0.61, 0.61, 0.61, 0.6, 0.0, 0.0, 1.0, 1.0, 0.97, 0.94, 0.91, 0.82,
    0.76, 0.74, 0.72, 0.71, 0.7, 0.69, 0.68, 0.67, 0.67, 0.66, 0.66, 0.66, 0.66,
    0.65, 0.65, 0.65, 0.65, 0.65, 0.64, 0.64, 0.64, 0.64, 0.63, 0.0, 0.0, 1.0,
    1.0, 0.97, 0.94, 0.91, 0.82, 0.76, 0.74, 0.72, 0.71, 0.7, 0.69, 0.69, 0.68,
    0.68, 0.67, 0.67, 0.67, 0.66, 0.66, 0.66, 0.66, 0.66, 0.65, 0.65, 0.64, 0.64,
    0.64, 0.64, 0.0, 0.0, 1.0, 1.0, 0.97, 0.94, 0.91, 0.82, 0.77, 0.74, 0.72,
    0.71, 0.7, 0.69, 0.69, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67, 0.67, 0.67,
    0.66, 0.66, 0.66, 0.66, 0.66, 0.65, 0.65, 0.0, 0.0, 1.0, 1.0, 0.98, 0.95,
    0.92, 0.84, 0.79, 0.76, 0.74, 0.72, 0.71, 0.71, 0.7, 0.7, 0.69, 0.69, 0.69,
    0.68, 0.68, 0.68, 0.68, 0.68, 0.67, 0.67, 0.67, 0.67, 0.66, 0.66, 0.66, 0.0,
    0.0, 1.0, 1.0, 0.98, 0.95, 0.92, 0.84, 0.79, 0.76, 0.75, 0.72, 0.71, 0.71,
    0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.69, 0.69, 0.69, 0.68, 0.67, 0.67, 0.67,
    0.67, 0.66, 0.66, 0.66, 0.0, 0.0, 1.0, 1.0, 0.98, 0.95, 0.92, 0.84, 0.79,
    0.76, 0.75, 0.73, 0.72, 0.72, 0.71, 0.71, 0.71, 0.7, 0.7, 0.7, 0.69, 0.69,
    0.69, 0.69, 0.69, 0.68, 0.68, 0.68, 0.68, 0.68, 0.68, 0.0, 0.0, 1.0, 1.0,
    0.98, 0.95, 0.92, 0.84, 0.79, 0.77, 0.75, 0.74, 0.73, 0.72, 0.71, 0.71, 0.71,
    0.7, 0.7, 0.7, 0.7, 0.69, 0.69, 0.69, 0.69, 0.69, 0.69, 0.68, 0.68, 0.68,
    0.68, 0.0, 0.0, 1.0, 1.0, 0.98, 0.95, 0.93, 0.85, 0.81, 0.78, 0.77, 0.75,
    0.74, 0.74, 0.73, 0.73, 0.72, 0.72, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71,
    0.71, 0.71, 0.7, 0.7, 0.7, 0.7, 0.0, 0.0, 1.0, 1.0, 0.98, 0.95, 0.93, 0.85,
    0.81, 0.78, 0.77, 0.75, 0.75, 0.74, 0.74, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72,
    0.72, 0.72, 0.72, 0.71, 0.71, 0.71, 0.71, 0.71, 0.71, 0.7, 0.0, 0.0, 1.0,
    1.0, 0.98, 0.95, 0.93, 0.86, 0.82, 0.79, 0.78, 0.77, 0.76, 0.75, 0.74, 0.74,
    0.74, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.72, 0.72, 0.72, 0.71,
    0.71, 0.71, 0.0, 0.0, 1.0, 1.0, 0.98, 0.95, 0.94, 0.86, 0.82, 0.79, 0.78,
    0.77, 0.76, 0.75, 0.75, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.73,
    0.73, 0.73, 0.73, 0.72, 0.72, 0.71, 0.71, 0.0, 0.0, 1.0, 1.0, 0.98, 0.96,
    0.94, 0.86, 0.82, 0.8, 0.78, 0.77, 0.76, 0.76, 0.75, 0.75, 0.75, 0.75, 0.74,
    0.74, 0.74, 0.74, 0.74, 0.74, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.73, 0.0,
    0.0, 1.0, 1.0, 0.98, 0.96, 0.94, 0.86, 0.82, 0.8, 0.79, 0.78, 0.77, 0.76,
    0.76, 0.75, 0.75, 0.75, 0.75, 0.75, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74, 0.74,
    0.74, 0.73, 0.73, 0.73, 0.0, 0.0, 1.0, 1.0, 0.98, 0.96, 0.94, 0.87, 0.83,
    0.81, 0.79, 0.78, 0.77, 0.77, 0.76, 0.76, 0.76, 0.75, 0.75, 0.75, 0.75, 0.75,
    0.75, 0.75, 0.75, 0.75, 0.75, 0.74, 0.74, 0.74, 0.74, 0.0, 0.0, 1.0, 1.0,
    0.98, 0.96, 0.94, 0.88, 0.83, 0.81, 0.8, 0.79, 0.78, 0.77, 0.77, 0.77, 0.76,
    0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.75, 0.75, 0.75, 0.75,
    0.75, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94, 0.88, 0.84, 0.82, 0.81, 0.79,
    0.78, 0.78, 0.77, 0.77, 0.77, 0.77, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76,
    0.76, 0.76, 0.76, 0.76, 0.76, 0.75, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94,
    0.88, 0.84, 0.82, 0.81, 0.8, 0.79, 0.78, 0.78, 0.78, 0.77, 0.77, 0.77, 0.77,
    0.77, 0.77, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.0, 0.0,
    1.0, 1.0, 0.99, 0.96, 0.94, 0.88, 0.85, 0.83, 0.81, 0.8, 0.79, 0.79, 0.78,
    0.78, 0.78, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.76, 0.76, 0.76, 0.76, 0.76,
    0.76, 0.76, 0.76, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94, 0.88, 0.85, 0.83,
    0.82, 0.8, 0.8, 0.79, 0.79, 0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.77, 0.77,
    0.77, 0.77, 0.77, 0.77, 0.77, 0.76, 0.76, 0.76, 0.0, 0.0, 1.0, 1.0, 0.99,
    0.96, 0.94, 0.88, 0.85, 0.83, 0.82, 0.81, 0.8, 0.79, 0.79, 0.79, 0.78, 0.78,
    0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.77, 0.76, 0.76,
    0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94, 0.88, 0.85, 0.84, 0.82, 0.81, 0.81,
    0.8, 0.79, 0.79, 0.79, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78,
    0.78, 0.78, 0.77, 0.77, 0.77, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94, 0.88,
    0.85, 0.84, 0.83, 0.81, 0.81, 0.81, 0.8, 0.79, 0.79, 0.79, 0.79, 0.79, 0.78,
    0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.78, 0.77, 0.77, 0.0, 0.0, 1.0,
    1.0, 0.99, 0.96, 0.94, 0.88, 0.85, 0.84, 0.83, 0.82, 0.81, 0.81, 0.81, 0.8,
    0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.79, 0.78, 0.78,
    0.78, 0.77, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94, 0.89, 0.85, 0.84, 0.83,
    0.82, 0.82, 0.81, 0.81, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.79, 0.79, 0.79,
    0.79, 0.79, 0.79, 0.79, 0.78, 0.78, 0.0, 0.0, 1.0, 1.0, 0.99, 0.96, 0.94,
    0.89, 0.85, 0.84, 0.83, 0.83, 0.82, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.8,
    0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.79, 0.79, 0.79, 0.78, 0.0, 0.0, 1.0,
    1.0, 0.99, 0.96, 0.94, 0.89, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.81, 0.81,
    0.81, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.79, 0.79,
    0.79, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.87, 0.85, 0.84, 0.83,
    0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.8,
    0.8, 0.8, 0.8, 0.8, 0.8, 0.8, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91,
    0.88, 0.85, 0.84, 0.83, 0.83, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81,
    0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81, 0.8, 0.8, 0.0, 0.0, 1.0, 1.0,
    0.99, 0.97, 0.95, 0.91, 0.88, 0.86, 0.84, 0.83, 0.83, 0.83, 0.82, 0.82, 0.82,
    0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.81, 0.81,
    0.81, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.86, 0.85, 0.84,
    0.84, 0.83, 0.83, 0.83, 0.83, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82,
    0.82, 0.82, 0.81, 0.81, 0.81, 0.81, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95,
    0.91, 0.88, 0.86, 0.85, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83, 0.83, 0.83,
    0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.81, 0.81, 0.81, 0.0, 0.0,
    1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.86, 0.85, 0.85, 0.84, 0.84, 0.84,
    0.84, 0.84, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.82, 0.82, 0.82, 0.82,
    0.82, 0.81, 0.81, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.86,
    0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83,
    0.83, 0.83, 0.82, 0.82, 0.82, 0.82, 0.82, 0.82, 0.0, 0.0, 1.0, 1.0, 0.99,
    0.97, 0.95, 0.91, 0.88, 0.86, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84,
    0.84, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.82, 0.82,
    0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.86, 0.85, 0.85, 0.85,
    0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83,
    0.83, 0.83, 0.83, 0.82, 0.82, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91,
    0.88, 0.87, 0.86, 0.86, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84,
    0.84, 0.84, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.83, 0.82, 0.0, 0.0, 1.0,
    1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.87, 0.86, 0.86, 0.86, 0.85, 0.85, 0.85,
    0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.83,
    0.83, 0.83, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97, 0.95, 0.91, 0.88, 0.87, 0.86,
    0.86, 0.86, 0.86, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84,
    0.84, 0.84, 0.84, 0.84, 0.84, 0.83, 0.83, 0.0, 0.0, 1.0, 1.0, 0.99, 0.97,
    0.96, 0.91, 0.88, 0.88, 0.87, 0.87, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86, 0.86,
    0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.85, 0.84, 0.84, 0.84, 0.84, 0.0,
    0.0 };

  // ============================ START PROGRAM ===============================
  tf = false;
  k = 1;
  exitg1 = false;

  while ((!exitg1) && (k < 3)) {
    frexp((3.0 + ((double)k - 1.0)) / 2.0, &exponent);
    if (std::abs((3.0 + ((double)k - 1.0)) - method) < std::ldexp(1.0, exponent
         - 53)) {
      tf = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (tf) {
    ncands = 1.0;
  } else {
    ncands = 2.0;
  }

  // Default values for Ratio Test
  FFRT = 0;
  b_mu = 0.0;
  if (method == 5.0) {
    //P0 = 0.001;
    FFRT = 1;
  } else {
    b_mu = 1.0;
  }

  // Set the values of the optional input arguments
  i = 0.0;
  emxInit_char_T(&switch_expression, 2);
  while (i < param) {
    
    upper(type, switch_expression);
    // CASE OF 'PO'
    if (switch_expression->data[0] == 'P'){
      exponent = 0;
    }

    // CASE OF 'MU'
    if (switch_expression->data[0] == 'M'){
      exponent = 1;
    }

    // CASE OF 'NCANDS'
    if (switch_expression->data[0] == 'N'){
      exponent = 2;
    }

    switch (exponent) {
      case 0: // CASE OF 'PO'
        P0 = value;
        i += 2.0;
      break;

      case 1: // CASE OF 'MU'
        b_mu = value;
        FFRT = 0;
        i += 2.0;
      break;

      case 2: // CASE OF 'NCANDS'
        tf = false;
        k = 1;
        exitg1 = false;
        while ((!exitg1) && (k < 4)) {
          frexp((double)iv0[k - 1] / 2.0, &ib);
          if (std::abs((double)iv0[k - 1] - method) < std::ldexp(1.0, ib - 53)) {
            tf = true;
            exitg1 = true;
          } else {
            k++;
          }
        }
        if (tf) {
          ncands = value;
        }
        i += 2.0;
      break;
    }
  }

  // Preparing input data
  emxFree_char_T(&switch_expression);
  emxInit_real_T(&zfixed, 2);
  ar = zfixed->size[0] * zfixed->size[1];
  zfixed->size[0] = 12;
  zfixed->size[1] = (int)ncands;
  emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
  k = 12 * (int)ncands;
  for (ar = 0; ar < k; ar++) {
    zfixed->data[ar] = 0.0;
  }

  b_nfixed = 12.0;
  ar = sqnorm->size[0] * sqnorm->size[1];
  sqnorm->size[0] = 0;
  sqnorm->size[1] = 0;
  emxEnsureCapacity((emxArray__common *)sqnorm, ar, sizeof(double));

  // Tests on Inputs ahat and Qahat
  // - Is the Q-matrix symmetric?
  // - Is the Q-matrix positive-definite?
  eig(Qahat, unusedExpr);

  // Remove integer numbers from float solution, so that all values 
  // are between -1 and 1 (for computational convenience only)
  for (k = 0; k < 12; k++) {
    x[k] = ahat[k];
    incr[k] = ahat[k] - rt_remd_snf(ahat[k], 1.0);
  }

  for (k = 0; k < 12; k++) {
    ahat[k] = rt_remd_snf(x[k], 1.0);
  }

  // Compute Z matrix based on the decomposition  Q=L^T*D*L; The transformed
  // float solution: \hat{a} = Z^T *ahat, Qzhat = Z^T * Qahat * Z
  decorrel(Qahat, ahat, Qzhat, Z, L, afcond, x, iZt);

  // Compute the bootstrapped success rate
  for (k = 0; k < 12; k++) {
    S[k] = 2.0 * (0.5 * b_erfc(-(0.5 / std::sqrt(afcond[k])) /
      1.4142135623730951)) - 1.0;
  }

  b_Ps = S[0];
  for (k = 0; k < 11; k++) {
    b_Ps *= S[k + 1];
  }

  // ============================== CASES ===================================
  emxInit_real_T(&b_zfixed, 2);
  emxInit_real_T(&b_sqnorm, 2);
  switch ((int)method) {
    case 1: // ILS with shrinking search
      ssearch(x, L, afcond, ncands, b_zfixed, b_sqnorm);
      ar = zfixed->size[0] * zfixed->size[1];
      zfixed->size[0] = 12;
      zfixed->size[1] = b_zfixed->size[1];
      emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
      k = b_zfixed->size[0] * b_zfixed->size[1];
      for (ar = 0; ar < k; ar++) {
        zfixed->data[ar] = b_zfixed->data[ar];
      }

      ar = sqnorm->size[0] * sqnorm->size[1];
      sqnorm->size[0] = 1;
      sqnorm->size[1] = b_sqnorm->size[1];
      emxEnsureCapacity((emxArray__common *)sqnorm, ar, sizeof(double));
      k = b_sqnorm->size[0] * b_sqnorm->size[1];
      for (ar = 0; ar < k; ar++) {
        sqnorm->data[ar] = b_sqnorm->data[ar];
      }
    break;

    case 2: // ILS with enumeration search
      lsearch(x, L, afcond, ncands, b_zfixed, b_sqnorm);
      ar = zfixed->size[0] * zfixed->size[1];
      zfixed->size[0] = 12;
      zfixed->size[1] = b_zfixed->size[1];
      emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
      k = b_zfixed->size[0] * b_zfixed->size[1];
      for (ar = 0; ar < k; ar++) {
        zfixed->data[ar] = b_zfixed->data[ar];
      }

      ar = sqnorm->size[0] * sqnorm->size[1];
      sqnorm->size[0] = 1;
      sqnorm->size[1] = b_sqnorm->size[1];
      emxEnsureCapacity((emxArray__common *)sqnorm, ar, sizeof(double));
      k = b_sqnorm->size[0] * b_sqnorm->size[1];
      for (ar = 0; ar < k; ar++) {
        sqnorm->data[ar] = b_sqnorm->data[ar];
      }
    break;

    case 3: // Integer rounding
      for (k = 0; k < 12; k++) {
        x[k] = rt_roundd_snf(x[k]);
      }

      ar = zfixed->size[0] * zfixed->size[1];
      zfixed->size[0] = 12;
      zfixed->size[1] = 1;
      emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
      for (ar = 0; ar < 12; ar++) {
        zfixed->data[ar] = x[ar];
      }
    break;

    case 4: // Integer bootstraping
      memset(&b_afixed[0], 0, 12U * sizeof(double));
      memset(&afcond[0], 0, 12U * sizeof(double));
      memset(&S[0], 0, 12U * sizeof(double));
      afcond[11] = x[11];

      // Rounding of last ambiguity (should be preferably be the most precise one) 
      b_afixed[11] = rt_roundd_snf(x[11]);

      // Used to compute conditional a
      for (FFRT = 0; FFRT < 11; FFRT++) {
        // Compute the ith conditional ambiguity on the ambiguities from i+1 to n
        i = b_afixed[11 - FFRT] - afcond[11 - FFRT];
        k = 11 - FFRT;
        for (ar = 0; ar < k; ar++) {
          S_data[ar] = S[ar] + i * L[(12 * ar - FFRT) + 11];
        }

        k = 11 - FFRT;
        for (ar = 0; ar < k; ar++) {
          S[ar] = S_data[ar];
        }

        afcond[10 - FFRT] = x[10 - FFRT] + S[10 - FFRT];
        b_afixed[10 - FFRT] = rt_roundd_snf(afcond[10 - FFRT]);
      }

      ar = zfixed->size[0] * zfixed->size[1];
      zfixed->size[0] = 12;
      zfixed->size[1] = 1;
      emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
      for (ar = 0; ar < 12; ar++) {
        zfixed->data[ar] = b_afixed[ar];
      }
    break;

    case 5: //  ILS with Ratio Test
      ssearch(x, L, afcond, ncands, b_zfixed, b_sqnorm);
      ar = zfixed->size[0] * zfixed->size[1];
      zfixed->size[0] = 12;
      zfixed->size[1] = b_zfixed->size[1];
      emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
      k = b_zfixed->size[0] * b_zfixed->size[1];
      for (ar = 0; ar < k; ar++) {
        zfixed->data[ar] = b_zfixed->data[ar];
      }

      ar = sqnorm->size[0] * sqnorm->size[1];
      sqnorm->size[0] = 1;
      sqnorm->size[1] = b_sqnorm->size[1];
      emxEnsureCapacity((emxArray__common *)sqnorm, ar, sizeof(double));
      k = b_sqnorm->size[0] * b_sqnorm->size[1];
      for (ar = 0; ar < k; ar++) {
        sqnorm->data[ar] = b_sqnorm->data[ar];
      }

      if (FFRT != 0) {
        if (1.0 - b_Ps > P0) {
          // Select the right table for the given fixed failure rate
          i = rt_roundd_snf(P0 * 1000.0);
          if (i == 1.0) {
            memcpy(&table_data[0], &table1[0], 1984U * sizeof(double));
          } else {
            if (i == 10.0) {
              memcpy(&table_data[0], &table10[0], 1271U * sizeof(double));
            }
          }

          // Use linear interpolation to find the treshhold value for the given PfILS 
          b_mu = interp1q(*(double (*)[31])&table_data[0], *(double (*)[31])&
                          table_data[372], 1.0 - b_Ps);
        } else {
          // If ILS failure rate smaller than P0: always accept
          b_mu = 1.0;
        }
      }

      // Perform Ratio Test
      if (b_sqnorm->data[0] / b_sqnorm->data[1] > b_mu) {
        // Rejection: keep float solution
        ar = zfixed->size[0] * zfixed->size[1];
        zfixed->size[0] = 12;
        zfixed->size[1] = 1;
        emxEnsureCapacity((emxArray__common *)zfixed, ar, sizeof(double));
        for (ar = 0; ar < 12; ar++) {
          zfixed->data[ar] = x[ar];
        }

        b_nfixed = 0.0;
        ncands = 1.0;
      }
    break;
  }

  emxFree_real_T(&b_sqnorm);

  // Perform the back-transformation and add the increments
  if (zfixed->size[0] == 1) {
    ar = afixed->size[0] * afixed->size[1];
    afixed->size[0] = 12;
    afixed->size[1] = zfixed->size[1];
    emxEnsureCapacity((emxArray__common *)afixed, ar, sizeof(double));
    for (ar = 0; ar < 12; ar++) {
      k = zfixed->size[1];
      for (exponent = 0; exponent < k; exponent++) {
        afixed->data[ar + afixed->size[0] * exponent] = 0.0;
        for (FFRT = 0; FFRT < 12; FFRT++) {
          afixed->data[ar + afixed->size[0] * exponent] += iZt[ar + 12 * FFRT] *
            zfixed->data[FFRT + zfixed->size[0] * exponent];
        }
      }
    }
  } else {
    unnamed_idx_1 = (unsigned int)zfixed->size[1];
    ar = afixed->size[0] * afixed->size[1];
    afixed->size[0] = 12;
    afixed->size[1] = (int)unnamed_idx_1;
    afixed->size[0] = 12;
    emxEnsureCapacity((emxArray__common *)afixed, ar, sizeof(double));
    k = afixed->size[1];
    for (ar = 0; ar < k; ar++) {
      for (exponent = 0; exponent < 12; exponent++) {
        afixed->data[exponent + afixed->size[0] * ar] = 0.0;
      }
    }

    if (zfixed->size[1] != 0) {
      exponent = 12 * (zfixed->size[1] - 1);
      for (k = 0; k <= exponent; k += 12) {
        for (ic = k + 1; ic <= k + 12; ic++) {
          afixed->data[ic - 1] = 0.0;
        }
      }

      FFRT = 0;
      for (k = 0; k <= exponent; k += 12) {
        ar = 0;
        for (ib = FFRT; ib + 1 <= FFRT + 12; ib++) {
          if (zfixed->data[ib] != 0.0) {
            ia = ar;
            for (ic = k; ic + 1 <= k + 12; ic++) {
              ia++;
              afixed->data[ic] += zfixed->data[ib] * iZt[ia - 1];
            }
          }

          ar += 12;
        }

        FFRT += 12;
      }
    }
  }

  emxFree_real_T(&zfixed);
  ar = b_zfixed->size[0] * b_zfixed->size[1];
  b_zfixed->size[0] = 12;
  b_zfixed->size[1] = (int)ncands;
  emxEnsureCapacity((emxArray__common *)b_zfixed, ar, sizeof(double));
  if (!((int)ncands == 0)) {
    for (exponent = 1; exponent <= (int)ncands; exponent++) {
      FFRT = (exponent - 1) * 12;
      for (k = 0; k < 12; k++) {
        b_zfixed->data[FFRT + k] = incr[k];
      }
    }
  }

  ar = afixed->size[0] * afixed->size[1];
  afixed->size[0] = 12;
  emxEnsureCapacity((emxArray__common *)afixed, ar, sizeof(double));
  exponent = afixed->size[0];
  FFRT = afixed->size[1];
  k = exponent * FFRT;
  for (ar = 0; ar < k; ar++) {
    afixed->data[ar] += b_zfixed->data[ar];
  }

  emxFree_real_T(&b_zfixed);
  *Ps = b_Ps;
  *nfixed = b_nfixed;
  *mu = b_mu;
}
// --------------------------------------------------------------------------
//                              End of mclambda
// --------------------------------------------------------------------------
